<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fzu.teamwork.dao.QuestionDao">
  <resultMap id="BaseResultMap" type="com.fzu.teamwork.model.Question">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="author_id" jdbcType="INTEGER" property="authorId" />
    <result column="response_num" jdbcType="INTEGER" property="responseNum" />
    <result column="report_num" jdbcType="INTEGER" property="reportNum" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="content_id" jdbcType="INTEGER" property="contentId" />
    <result column="anonymous" jdbcType="INTEGER" property="anonymous" />
    <result column="kind_id" jdbcType="INTEGER" property="kindId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, author_id, response_num, report_num, create_time, content_id, anonymous, kind_id
  </sql>
  <select id="selectByExample" parameterType="com.fzu.teamwork.model.QuestionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from question
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from question
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fzu.teamwork.model.QuestionExample">
    delete from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.fzu.teamwork.model.Question" useGeneratedKeys="true">
    insert into question (author_id, response_num, report_num, 
      create_time, content_id, anonymous, 
      kind_id)
    values (#{authorId,jdbcType=INTEGER}, #{responseNum,jdbcType=INTEGER}, #{reportNum,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{contentId,jdbcType=INTEGER}, #{anonymous,jdbcType=INTEGER}, 
      #{kindId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.fzu.teamwork.model.Question" useGeneratedKeys="true">
    insert into question
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="authorId != null">
        author_id,
      </if>
      <if test="responseNum != null">
        response_num,
      </if>
      <if test="reportNum != null">
        report_num,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="contentId != null">
        content_id,
      </if>
      <if test="anonymous != null">
        anonymous,
      </if>
      <if test="kindId != null">
        kind_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="authorId != null">
        #{authorId,jdbcType=INTEGER},
      </if>
      <if test="responseNum != null">
        #{responseNum,jdbcType=INTEGER},
      </if>
      <if test="reportNum != null">
        #{reportNum,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="contentId != null">
        #{contentId,jdbcType=INTEGER},
      </if>
      <if test="anonymous != null">
        #{anonymous,jdbcType=INTEGER},
      </if>
      <if test="kindId != null">
        #{kindId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fzu.teamwork.model.QuestionExample" resultType="java.lang.Long">
    select count(*) from question
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update question
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.authorId != null">
        author_id = #{record.authorId,jdbcType=INTEGER},
      </if>
      <if test="record.responseNum != null">
        response_num = #{record.responseNum,jdbcType=INTEGER},
      </if>
      <if test="record.reportNum != null">
        report_num = #{record.reportNum,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.contentId != null">
        content_id = #{record.contentId,jdbcType=INTEGER},
      </if>
      <if test="record.anonymous != null">
        anonymous = #{record.anonymous,jdbcType=INTEGER},
      </if>
      <if test="record.kindId != null">
        kind_id = #{record.kindId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update question
    set id = #{record.id,jdbcType=INTEGER},
      author_id = #{record.authorId,jdbcType=INTEGER},
      response_num = #{record.responseNum,jdbcType=INTEGER},
      report_num = #{record.reportNum,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      content_id = #{record.contentId,jdbcType=INTEGER},
      anonymous = #{record.anonymous,jdbcType=INTEGER},
      kind_id = #{record.kindId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fzu.teamwork.model.Question">
    update question
    <set>
      <if test="authorId != null">
        author_id = #{authorId,jdbcType=INTEGER},
      </if>
      <if test="responseNum != null">
        response_num = #{responseNum,jdbcType=INTEGER},
      </if>
      <if test="reportNum != null">
        report_num = #{reportNum,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="contentId != null">
        content_id = #{contentId,jdbcType=INTEGER},
      </if>
      <if test="anonymous != null">
        anonymous = #{anonymous,jdbcType=INTEGER},
      </if>
      <if test="kindId != null">
        kind_id = #{kindId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fzu.teamwork.model.Question">
    update question
    set author_id = #{authorId,jdbcType=INTEGER},
      response_num = #{responseNum,jdbcType=INTEGER},
      report_num = #{reportNum,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      content_id = #{contentId,jdbcType=INTEGER},
      anonymous = #{anonymous,jdbcType=INTEGER},
      kind_id = #{kindId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectQuestion" parameterType="int" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select * from question limit #{start},#{count}
  </select>
  <select id="selectUserQuestion" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select * from question where author_id=#{uid} order by create_time desc limit #{start},#{count}
  </select>

  <select id="selectAttentionQuestion" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select t1.id, author_id, response_num, report_num, t1.create_time, content_id
    from question t1 left join attention a on t1.id = a.question_id
    where a.user_id=#{uid} and a.flag = 1 order by a.create_time desc limit #{start},#{count}
  </select>

  <select id="selectQuestionByHeat" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select * from question order by response_num desc limit #{start},#{count}
  </select>

  <select id="selectQuestionByTime" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select * from question order by create_time desc limit #{start},#{count}
  </select>

  <select id="selectQuestionByKeyWord" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select t1.id, author_id, response_num, report_num, create_time, content_id
    from question t1 left join question_title qt on t1.id = qt.question_id
    left join title t on qt.title_id = t.id
    where (t.title like #{keyWord}) order by create_time desc limit #{start}, #{count}
  </select>

  <select id="selectQuestionNumByKeyWord" parameterType="Map" resultType="java.lang.Integer">
    select count(*)
    from question t1 left join question_title qt on t1.id = qt.question_id
    left join title t on qt.title_id = t.id
    where (t.title like #{keyWord})
  </select>

  <select id="selectResponseQuestion" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select t1.id, t1.author_id, t1.response_num, t1.report_num, t1.create_time, t1.content_id
    from question t1 left join response r on t1.id = r.question_id
    where r.author_id = #{uid}
    order by create_time desc limit #{start},#{count}
  </select>

  <select id="selectResponseQuestionNum" parameterType="Map" resultType="java.lang.Integer">
    select count(*)
    from question t1 left join response r on t1.id = r.question_id
    where r.author_id = #{uid}
  </select>

  <select id="selectQuestionByKindAndHeat" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select * from question where kind_id=#{kind} order by response_num desc limit #{start},#{count}
  </select>

  <select id="selectQuestionByKindAndDate" parameterType="Map" resultType="com.fzu.teamwork.model.Question" resultMap="BaseResultMap">
    select * from question where kind_id=#{kind} order by create_time desc limit #{start},#{count}
  </select>
</mapper>